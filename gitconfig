[alias]
    st = status
    # show only untracked files
    stu = ls-files --exclude-standard --other

    # checkouts
    co = checkout
    cob = checkout -b
    cop = checkout -p
    ## checkout to branch by regex
    cor = "!checkout_by_regex() { git checkout $(git branch | grep -e \"$1\" | head -n1); }; checkout_by_regex"
    # checkout by regex with fzf
    corf = "!checkout_by_regex() { git checkout $(git branch | grep -e \"$1\" | fzf); }; checkout_by_regex"
    cof = "!checkout_fzf() { git branch | fzf | xargs git checkout; }; checkout_fzf"
    colf = "!checkout_recent_fzf() { git reflog | grep -o \"checkout: moving from .* to \" | sed -e 's/checkout: moving from //' -e 's/ to $//' | head -10 | sort -u | fzf | xargs git checkout; }; checkout_recent_fzf"
    colb = "!checkout_last_branch() { git co @{-$1}; }; checkout_last_branch"

    # branches
    br = branch
    bra = branch -a
    brr = branch -r
    ## prints #<num> last branches
    lb = "!print_last_branches() { git reflog | grep -o \"checkout: moving from .* to \" | sed -e 's/checkout: moving from //' -e 's/ to $//' | head -$1 | nl; }; print_last_branches"

    # commits
    ## show all diffs when entering commit
    ct = commit --verbose
    ## adds all files and then commits them
    cta = commit -a --verbose
    ctm = commit -m

    # add all and then amend
    amend = commit --verbose --amend
    aamend = !git add -A && git commit --amend --verbose
    aumend = !git add -u && git commit --amend
    afmend = "!add_fzf_amend() { git status -s | awk '{print $2}' | fzf -m | xargs git add && git amend; }; add_fzf_amend"

    # adds
    ## stage ALL changes https://stackoverflow.com/questions/572549/difference-between-git-add-a-and-git-add?rq=1
    aa = add -A
    ap = add -p
    ## add without untracked
    au = add -u
    auc = !git add -u && git commit --verbose
    aac = !git add -A && git commit --verbose
    ## add some files and commit immediately
    afc = "!add_files_and_commit() { git status -s | awk '{print $2}' | fzf -m | xargs git add && git commit --verbose; }; add_files_and_commit"
    aaf = "!add_fzf() { git status -s | awk '{print $2}' | fzf -m | xargs git add; }; add_fzf"

    # diffs
    df = diff
    ## df with stage
    dfws = diff --staged
    ## df between staged and last commit
    dfsc = diff --staged HEAD
    ## df between last commit
    dflc = diff HEAD^ HEAD
    dfnames = diff --name-only

    # rebase
    rb = rebase
    rbi = rebase -i

    # logs
    lgp = log --oneline --graph --decorate --pretty=format:\"%C(auto)%d%C(reset) %s %C(magenta)(%ar)%C(reset) %C(cyan)%h%C(reset) %C(red)[%cn]%C(reset)\"

    # stash
    s = stash
    sl = stash list
    ss = stash save
    ssu = stash save -u
    sp = stash pop

    # push
    ps = push
    psf = push -f
    psdry = push --dry-run
    pom = push origin master

    # pull
    pl = pull

    # restores
    ref =  "!restore_fzf() { git status -s | awk '{print $2}' | fzf -m | xargs git restore; }; restore_fzf"

    # prints the name of the branch
    name = "! git rev-parse --abbrev-ref HEAD"

    # delete multiple untracked files with fzf
    rmf = "!delete_untracked() { git ls-files --exclude-standard --other | fzf -m | xargs rm; }; delete_untracked"

    alias = "!print_aliases() { git config --get-regexp ^alias | sed s/alias.//g; }; print_aliases"
[color]
    ui = auto
[merge]
	tool = vimdiff
[core]
    editor = vim
    # https://devblogs.microsoft.com/devops/updates-to-the-git-commit-graph-feature/
	commitGraph = true
	excludesfile = /home/gideon/.gitignore_global
[user]
    # these are set in ~/.gitconfig_local
[include]
    path = ~/.gitconfig_local
[commit]
    verbose = true
[credential]
    helper = cache --timeout 60000
[diff]
	tool = vimdiff
[color "status"]
    untracked = yellow bold
[difftool]
	prompt = false
[rerere]
    enabled = true
[gc]
	writeCommitGraph = true
